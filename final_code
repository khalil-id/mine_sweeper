#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include<windows.h>

#define ROWS 10		//lignes
#define COLS 10		//colonnes

// Codes d'echappement ANSI pour les couleurs
#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_GREEN   "\x1b[32m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_BLUE    "\x1b[34m"
#define ANSI_COLOR_MAGENTA "\x1b[35m"
#define ANSI_COLOR_CYAN    "\x1b[36m"
#define ANSI_COLOR_RESET   "\x1b[0m"

char board[ROWS][COLS];		// Tableau principal representant l'etat actuel du jeu: m, 0->8
char visible[ROWS][COLS];	// Tableau visible par le joueur, affichant les cellules decouvertes ou marquees: m, d, 0->8
int revealed[ROWS][COLS];	// Tableau indiquant si une cellule a ete revelee(1) ou non(0) par le joueur

// Fonction pour initialiser le tableau avec des mines placees au hasard
void initializeBoard(int MINE_COUNT) {
	int i,j;
    for(i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            board[i][j] = '.';
            visible[i][j] = 'X';
            revealed[i][j] = 0;
        }
    }

    srand(time(NULL));
    for (i = 0; i < MINE_COUNT; i++) {
        int row = rand() % ROWS;
        int col = rand() % COLS;
        if (board[row][col] == 'm') {
            i--;
        } else {
            board[row][col] = 'm';
        }
    }
}

// Affiche le tableau de jeu de style démineur dans la console
void printBoard() {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    printf("\n");
    int i,j;
    
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            if (visible[i][j] == 'm') {		//Les mines par "m" en rouge
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED); // Set color to red
                printf("  m   ");
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); // Reset color
            } else if (visible[i][j] == 'd') {	//Les drapeaux par "F" en vert
                SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN); // Set color to green
                printf("  F   ");
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); // Reset color
            } else if (visible[i][j] >= '1' && visible[i][j] <= '8') {	//Les chiffres (1 a 8) en jaune
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN); // Set color to yellow
                printf("  %c   ", visible[i][j]);
                //SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); // Reset color
            } else if(!( board[i][j] != 'm' && revealed[i][j]==1 )){	//Les cellules non révélées avec leur position en cyan
                SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN); // Set color to cyan
                char buffer[10];
                sprintf(buffer, "[%d:%d]", i, j);
                printf("%s ", buffer);
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); // Reset color
            }else{			//Les autres cellules par un point (.) en jaune
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN); // Set color to yellow
                printf("  .   ");
                SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE); // Reset color
            }
        }
        printf("\n");
	SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);
    }
    
}

//Fonction pour compter le nombre de mines dans les cellules adjacentes
int countMines(int row, int col) {
    int i, j, count = 0;
    for (i = row - 1; i <= row + 1; i++) {
        for (j = col - 1; j <= col + 1; j++) {
            if (i >= 0 && i < ROWS && j >= 0 && j < COLS) {
                if (board[i][j] == 'm') {
                    count++;
                }
            }
        }
    }
    return count;
}

// Fonction recursive pour reveler les cellules du tableau
void reveal(int row, int col) {
    // Vérifiez si la ligne et la colonne sont dans les limites du tableau
    if (row < 0 || row >= ROWS || col < 0 || col >= COLS) {
        return;
    }

    // Vérifiez si la cellule a deja ete revelee
    if (visible[row][col] != 'X') {
        return;
    }

    // Reveler la cellule
    visible[row][col] = board[row][col];

    // si la cellule contient une mine, retournez
    if (board[row][col] == 'm') {
        return;
    }

    // Comptez le nombre de mines dans les cellules adjacentes
    int mineCount = countMines(row, col);

    // S'il y a des mines dans les cellules adjacentes, montrez le numéro et retournez
    if (mineCount > 0) {
        visible[row][col] = '0' + mineCount;
        return;
    }

    // S'il n'y a pas de mines, revelez toutes les cellules adjacentes qui ne sont pas des mines.
    int i,j;
    for (i = row - 1; i <= row + 1 ; i++) {
        for (j = col - 1; j <= col + 1 ; j++) {
            reveal(i, j);
            if(visible[row][col] != 'X')
            	revealed[i][j]=1;
        }
    }
}
//fonction pour ajouter le drapeau
void addFlag(int row, int col) {
    if (visible[row][col] == 'X') {
        visible[row][col] = 'd';
    }
}

// fonction pour supprimer le drapeeau a l'endroit specifie
void removeFlag(int row, int col) {
    if (visible[row][col] == 'd') {
        visible[row][col] = 'X';
    }
}

//la main fonction
int main() {
	printf("--level-- \n1-debutant\n2-moyen\n3-dificile\n");
	int level, minesCount;
	scanf("%d",&level);
	int MINE_COUNT = level * 10;
    	initializeBoard(MINE_COUNT);

  	  int gameOver = 0;
  	  while (!gameOver) {
        printBoard();

        char action;
        int row, col;
        printf("Enter action (r for reveal, f to add flag, d to remove flag): ");
        scanf(" %c", &action);

        if (action == 'r') {
            printf("Enter row and column to reveal (ex: 2 4): ");
            scanf("%d %d", &row, &col);

            if (board[row][col] == 'm') {
                gameOver = 1;
                visible[row][col] = 'm';
                printBoard();
                printf("\n--------------------------------"
					   "\n----You hit a mine! Game over---");
				return 0;
            } else {
                reveal(row, col);
            }
        } else if (action == 'f') {
            printf("Enter row and column to add flag (ex: 2 4): ");
            scanf("%d %d", &row, &col);
            addFlag(row, col);
        } else if (action == 'd') {
            printf("Enter row and column to remove flag (ex: 2 4): ");
            scanf("%d %d", &row, &col);
            removeFlag(row, col);
        } else {
            printf("Invalid action. Please enter 'r', 'f', or 'd'.\n");
        }

        int i, j, unrevealedCount = 0;
        for (i = 0; i < ROWS; i++) {
            for (j = 0; j < COLS; j++) {
                if (visible[i][j] == 'X') {
                    unrevealedCount++;
                }
            }
        }

        if (unrevealedCount == MINE_COUNT) {
            gameOver = 1;
            printBoard();
            printf("\n-----------------------------------------------"
				   "\n---Congratulations! You found all the mines!---"
				   "\n-----------------------------------------------");
        }
    }

    return 0;
}
